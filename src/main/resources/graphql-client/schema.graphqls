type Mutation {
    # Common
    registerUser(input: RegisterUserInput!): RegisterUserResp
    # Auth
    login(input: LoginInput!): LoginResp
    refreshToken(refreshToken: String): RefreshTokenResp
    logout(accessToken: String, refreshToken: String): String
}

type Query {
    me: User
    userProfile(id: String!): UserProfile
    users: [User]
}

type User {
    id: ID!
    userName: String!
    role: String!
    profile: UserProfile
    email: String
    stats: UserStats
    followers: [User!]
    followings: [User!]
}

type UserProfile {
    userID: ID!
    fullName: String!
    phoneNumber: String
    birthDate: String
    bio: String
    avatarUrl: String
}

type UserStats {
    userID: ID!
    followingCount: Int!
    followerCount: Int!
    postCount: Int!
}

input RegisterUserInput {
    userName: String! @NotBlank(message: "Username must not be blank")
    firstName: String! @NotBlank(message: "First name must not be blank")
    lastName: String!
    email: String! @Email(message: "Invalid email address")
    password: String! @Min(value: 8, message: "Password must be at least 8 characters long")
    dob: Date! @Past
}

type RegisterUserResp {
    id: String!
    message: String
}

input LoginInput {
    emailOrUsername: String!
    password: String!
}

type LoginResp {
    accessToken: String!
    refreshToken: String!
    message: String
}

type RefreshTokenResp {
    accessToken: String!
    message: String
}
