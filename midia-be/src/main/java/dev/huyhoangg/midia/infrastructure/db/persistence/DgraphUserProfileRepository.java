package dev.huyhoangg.midia.infrastructure.db.persistence;

import com.fasterxml.jackson.databind.ObjectMapper;
import dev.huyhoangg.midia.dgraph.processor.DgraphMappingProcessor;
import dev.huyhoangg.midia.dgraph.query.QueryBuilder;
import dev.huyhoangg.midia.domain.model.user.User;
import dev.huyhoangg.midia.domain.model.user.UserProfile;
import dev.huyhoangg.midia.domain.repository.user.UserProfileRepository;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.List;

/**
 * <h4>Repository implementation for querying {@link UserProfile} data from Dgraph.</h4>
 * <p>
 * This class uses {@link DgraphTemplate} to execute read-only Dgraph queries
 * and maps the results using {@link DgraphMappingProcessor}.
 * </p>
 *
 * <p>
 * Dependency injection is used via Lombok's {@code @RequiredArgsConstructor},
 * and class-level logging is enabled through {@code @Slf4j}.
 * </p>
 *
 * <p><b>Supported Operations:</b></p>
 * <ul>
 *     <li>Find {@link UserProfile} by User UID</li>
 *     <li>Save (currently unimplemented)</li>
 * </ul>
 *
 * @since 2025-06-26
 */
@Slf4j
@Repository
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class DgraphUserProfileRepository implements UserProfileRepository {
    DgraphMappingProcessor mp;
    DgraphTemplate template;
    ObjectMapper mapper;

    @Override
    public UserProfile save(UserProfile userProfile) {
        log.info("save: {}", userProfile);
        return null;
    }

    /**
     * <h4>Find a {@link UserProfile} based on the UID of a {@link User}.</h4>
     *
     * <p>This method performs the following steps:</p>
     * <ol>
     *     <li>Query the {@code user.profile} field of the {@link User} node with the given UID.</li>
     *     <li>Use the fetched {@link UserProfile} UID to return the mapped profile.</li>
     * </ol>
     *
     * <p>Example Dgraph query used (auto-generated by {@link QueryBuilder}):</p>
     *
     * <pre>{@code
     * query get_user_profile_by_uid {
     *   q(func: uid("0x4e29")) {
     *     uid
     *     dgraph.type
     *     user.profile {
     *       uid
     *       dgraph.type
     *       user_profile.full_name
     *       user_profile.phone_number
     *       user_profile.dob
     *       user_profile.bio
     *       user_profile.avatar_url
     *     }
     *   }
     * }
     * }</pre>
     *
     * <p>
     * This assumes that the {@link User} object has a {@code user.profile} relationship
     * correctly annotated with {@code @Relationship(eagerFetch = true)} so the profile
     * data is included in the same query result.
     * </p>
     *
     * @param userId the UID of the user in string format (e.g., {@code "0x4e29"})
     * @return the {@link UserProfile} associated with the given user, or null if not found
     * @throws RuntimeException if the Dgraph query fails or the result cannot be mapped
     * @author HoanTX
     */
    @Override
    public UserProfile findByUserId(String userId) {
        log.info("findByUserId: {}", userId);

        var query = QueryBuilder.builder()
                .queryName("get_user_profile_by_uid")
                .forType(User.class)
                .withUids(userId)
                .build();

        var user = template.executeReadOnlyQuery(txn -> {
            var response = txn.query(query);
            return (List<User>) new ArrayList<User>(
                    mp.fromDefaultQueryResponse(response.getJson().toStringUtf8(), User.class)
            );
        }).getFirst();
        log.info(user.getProfile().toString());

        return user.getProfile();
    }
}
