spring:
  application:
    name: midia_be
  data:
    redis:
      client-name: midia-be
      host: ${REDIS_HOST:localhost}
      port: 6379
      database: 0
      timeout: 10s
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_OAUTH2_CLIENT_ID}
            client-secret: ${GOOGLE_OAUTH2_CLIENT_SECRET}
            scope:
              - email
              - profile
  devtools:
    restart:
      enabled: false
  kafka:
    bootstrap-servers:
      - ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
  mail:
    host: ${SMTP_HOST:smtp.gmail.com}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME}
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          connectiontimeout: 5000
          timeout: 5000
          starttls:
            enable: true
  threads:
    virtual:
      enabled: true

springdoc:
  show-actuator: true
  version: 0.0.1

management:
  endpoints:
    web:
      exposure:
        include: "*"

web-frontend-url: ${WEB_FRONTEND_URL:http://localhost:5173}

cors:
  allowed-origins:
    - ${web-frontend-url}

dgs:
  graphql:
    graphiql:
      enabled: false
    virtualthreads:
      enabled: true
    schema-locations: classpath*:graphql-client/*.graphql*
    extensions:
      validation:
        enabled: true
      scalars:
        enabled: true
    websocket:
      enabled: true

jwt:
  signer-key: "3ac67e1f13d6744c9e5158c0508a91da54696589d871c20750f16a24838c49322096f9e541173311b2f11c94bc11734d157b7174bb78b0e2a57d3a2dd4f40ef0"
  valid-duration: 60 # in seconds
  refresh-duration: 3600 # in seconds
  issuer: "midia.io.vn"

server:
  port: 8000 # for avoid port conflict with dgraph standalone container which run in port 8080

dgraph:
  host: ${DGRAPH_HOST:localhost}
  port: ${DGRAPH_PORT:9080}

email-verification:
  url: ${web-frontend-url}/email-verify
  valid-duration: 900 # in seconds

gcs:
  bucket: ${GCS_BUCKET_NAME:default}

oauth2-login:
  redirect-uris:
    - ${web-frontend-url}/oauth2/redirect