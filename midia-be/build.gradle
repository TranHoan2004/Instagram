plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.netflix.dgs.codegen' version '7.0.3'
    id 'com.diffplug.spotless' version '7.0.4'
}

group = 'com.midia'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

spotless {
    java {
        targetExclude 'build/generated/**'
        trimTrailingWhitespace()
        removeUnusedImports()
        palantirJavaFormat()
        formatAnnotations()
        importOrder('jakarta', 'com', '', 'org', 'java|javax','\\#')
    }
}

ext {
    set('netflixDgsVersion', "10.1.2")
    set('dgraph4jVersion', "24.2.0")
    set('grpcVersion', "1.71.0")
    set('googleAutoServiceVersion', "1.1.1")
    set('springdocVersion', "2.8.8")
    set('graphqlJavaExtendedVersion', "22.0")
    set('mapstructVersion', "1.6.3")
    set('springCloudGcpVersion', "6.2.2")
}

dependencies {
    implementation 'com.google.cloud:spring-cloud-gcp-starter-storage'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation "com.google.auto.service:auto-service:${googleAutoServiceVersion}"
    annotationProcessor "com.google.auto.service:auto-service:${googleAutoServiceVersion}"
    implementation "com.graphql-java:graphql-java-extended-validation:${graphqlJavaExtendedVersion}"
    implementation "com.graphql-java:graphql-java-extended-scalars:${graphqlJavaExtendedVersion}"
    implementation 'com.netflix.graphql.dgs:graphql-dgs-extended-scalars'
    implementation 'com.netflix.graphql.dgs:graphql-dgs-extended-validation'
    implementation 'com.google.protobuf:protobuf-java:4.31.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0'
    implementation("io.grpc:grpc-netty:${grpcVersion}")
    implementation("io.grpc:grpc-protobuf:${grpcVersion}")
    implementation("io.grpc:grpc-stub:${grpcVersion}")
    implementation "io.dgraph:dgraph4j:${dgraph4jVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${netflixDgsVersion}"
        mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:$springCloudGcpVersion"
    }
}

generateJava {
    schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
    packageName = 'dev.huyhoangg.midia.codegen'
    generateClient = true
}

tasks.named('test') {
    useJUnitPlatform()
}
