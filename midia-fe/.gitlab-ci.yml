# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  VERSION_TAG: $CI_COMMIT_TAG

stages:
  - lint
  - build
  - test
  - deploy

cache:
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/
    - .npm/
  policy: pull-push

lint-job:
  stage: lint
  image: node:20-alpine
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - apk add --no-cache git
    - npm ci --cache .npm --prefer-offline
  script:
    - echo "Running ESLint..."
    - npm run lint

build-docker:
  stage: build
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: never
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - echo "Building Docker Image..."
    - docker build -t $IMAGE_NAME:$VERSION_TAG .
    - echo "Docker Image successfully built."
    - echo "Pushing Docker Image..."
    - docker push $IMAGE_NAME:$VERSION_TAG
    - echo "Done..."

deploy-dev:
  stage: deploy
  image: google/cloud-sdk:alpine
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: never
  environment: 
    name: dev
    url: https://web-dev.midia.io.vn
  script:
    - echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > $CI_PROJECT_DIR/gcp-key.json
    - gcloud auth activate-service-account --key-file=$CI_PROJECT_DIR/gcp-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud compute ssh $VM_NAME --zone=$VM_ZONE --command="
        sudo docker stop midia-fe || true &&
        sudo docker rm midia-fe || true &&
        echo $CI_REGISTRY_PASSWORD | sudo docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY &&
        sudo docker pull $IMAGE_NAME:$VERSION_TAG
      "