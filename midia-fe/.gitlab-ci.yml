# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  VERSION_TAG: $CI_COMMIT_TAG

stages:
  - lint
  - build
  - test
  - deploy

lint-job:
  stage: lint
  image: node:20-alpine
  before_script:
    - apk add --no-cache git
    - npm ci
  script:
    - echo "Running ESLint..."
    - npm run lint

build-job:
  stage: build
  image: node:20-alpine
  script:
    - npm ci
    - echo "Building production..."
    - npm run build
  artifacts:
    paths:
      - node_modules
      - package.json
      - react-router.config.ts
      - Dockerfile

# Only deploy when push a new tag created on main branch
deploy-job:
  stage: deploy
  image: gitlab/dind
  services:
    - docker:dind
  environment: production
  only:
    - tags
  script:
    - echo "Checking if tag is on main branch..."
    - |
      if git merge-base --is-ancestor origin/main HEAD; then
        echo "Tag is from main branch ✅"
      else
        echo "❌ Tag is not from main branch. Skipping build."
        exit 0
      fi
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - echo "Building Docker Image..."
    - docker build -t "$IMAGE_NAME:$VERSION_TAG" .
    - echo "Docker Image successfully built."
    - echo "Pushing Docker Image..."
    - docker push "$IMAGE_NAME:$VERSION_TAG"
